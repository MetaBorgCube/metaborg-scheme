module Common
	
lexical syntax
	BOOL           = "#t"
	BOOL           = "#f"
	
	CHAR           = "#\\" ~[]
	CHAR           = "#\\space"
	CHAR           = "#\\newline"
	
	STRING         = "\"" StringChar* "\"" 
	StringChar     = ~[\"\\] 
	
	StringChar     = "\\\"" 
	StringChar     = BackSlashChar 
	BackSlashChar  = "\\" 

	NUM            = NUM2
	NUM            = NUM8
	NUM            = NUM10
	NUM            = NUM16
	
	NUM2           = "#b" [\+\-]? [0-1]+
	NUM8           = "#o" [\+\-]? [0-7]+
	NUM10          = "#d"? [\+\-]? [0-9]+
	NUM16          = "#x" [\+\-]? [0-9a-f]+ 
	
	LAYOUT         = [\ \t\n\r] 
	CommentChar    = [\#] 
	LAYOUT         = "|#" InsideComment* "#|" 
	InsideComment  = ~[\#] 
	InsideComment  = CommentChar 
	LAYOUT         = ";" ~[\n\r]* NewLineEOF 
	NewLineEOF     = [\n\r] 
	NewLineEOF     = EOF 
	EOF            =  


	ID             = [a-z\_] [a-z0-9\_\+\-\.\@]*
	
	ID   = "else"              {reject}
	ID   = "=>"                {reject}
	ID   = "define"            {reject}
	ID   = "unquote"           {reject}
	ID   = "unquote-splicing"  {reject}
	ID   = "quote"             {reject}
	ID   = "lambda"            {reject}
	ID   = "if"                {reject}
	ID   = "set!"              {reject}
	ID   = "set-car!"          {reject}
	ID   = "set-cdr!"          {reject}
	ID   = "begin"             {reject}
	ID   = "cond"              {reject}
	ID   = "and"               {reject}
	ID   = "or"                {reject}
	ID   = "cons"              {reject}
	ID   = "case"              {reject}
	ID   = "let"               {reject}
	ID   = "let*"              {reject}
	ID   = "letrec"            {reject}
	ID   = "do"                {reject}
	ID   = "delay"             {reject}
	ID   = "quasiquote"        {reject}
	ID   = "call-with-current-continuation" {reject}
	
	ID   = "abs"               {reject}
	ID   = "sqrt"              {reject}
	ID   = "not"               {reject}
	ID   = "length"            {reject}
	ID   = "car"               {reject}
	ID   = "cdr"               {reject}
	ID   = "number?"           {reject}
	ID   = "integer?"          {reject}
	ID   = "pair?"             {reject}
	ID   = "symbol?"           {reject}
	ID   = "boolean?"          {reject}
	ID   = "string?"           {reject}
	ID   = "null?"             {reject}
 
	AbbPrefix = "'"
	AbbPrefix = "`"
	AbbPrefix = ","
	AbbPrefix = ",@"
		
lexical restrictions

  // Ensure greedy matching for lexicals
  
    CommentChar   -/- [\|]
	NUM2          -/- [0-1]
	NUM8          -/- [0-8]
	NUM10         -/- [0-9]
	NUM16         -/- [0-9a-f]

	ID            -/- [0-9a-z\!\$\%\&\*\/\:\<\=\>\?\^\_\~\+\-\.\@]
  
  // EOF may not be followed by any char
  
    EOF           -/- ~[]
  
  // Backslash chars in strings may not be followed by " 
  
    BackSlashChar -/- [\"]

context-free restrictions

  // Ensure greedy matching for comments
  
  LAYOUT? -/- [\ \t\n\r]
  LAYOUT? -/- [\/].[\/]
  LAYOUT? -/- [\/].[\*]
