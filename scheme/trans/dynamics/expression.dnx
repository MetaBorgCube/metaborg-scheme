module expression

imports
  lib
  
rules
  eval-binop(Add(), l, r) = iadd(l, r)
  eval-binop(Sub(), l, r) = isub(l, r)
  eval-binop(Lt(), l, r)  = ilt(l, r)
  eval-binop(Gt(), l, r)  = igt(l, r)
  eval-binop(Or(), l, r)  = ior(l, r)
  eval-binop(And(), l, r) = iand(l, r)
  eval-binop(Eq(), l, r)  = ieq(l, r)
  
  eval-binop(Conz(), l, r) = 
    list <- new(int(2));
    set(list, [0], l);
    set(list, [1], r);
    return(list)
    
  eval-binop(SetCar(), list, val) = 
    v1 <- get(list, [0]);
    set(list, [0], val);
    return(v1)
    
  eval-binop(SetCdr(), list, val) = 
    v1 <- get(list, [1]);
    set(list, [1], val);
    return(v1)
  
rules
  eval-unop(Car(), val) =
    return(get(val, [0]))
  eval-unop(Cdr(), val) =
    return(get(val, [1]))
  
rules
  eval-exp(Num(v))     = return(int(v))
  eval-exp(EmptyList())= return(new(int(0)))
  eval-exp(Bool("#t")) = return(int(1))
  eval-exp(Bool("#f")) = return(int(0))
  eval-exp(Ref(name))  = return(get(cur(), resolveVar(name)))
  
  eval-exp(Set(Ref(name), exp)) = 
    v1 <- eval-exp(exp);
    path = resolveVar(name);
    v2 <- get(cur(), path);
    set(cur(), path, v1);
    return(v2)
    
    
  eval-exp(BinOp(Gte(), l, r))  = 
    out <- eval-exp(
      BinOp(Or(), 
        BinOp(Gt(), l, r), 
        BinOp(Eq(), l, r)
      ));
    return(out)
  
  eval-exp(BinOp(Lte(), l, r))  = 
    out <- eval-exp(
      BinOp(Or(), 
        BinOp(Lt(), l, r), 
        BinOp(Eq(), l, r)
      ));
    return(out)
  
  eval-exp(BinOp(op, left, right)) =
    v1 <- eval-exp(left);
    v2 <- eval-exp(right);
    return(eval-binop(op, v1, v2))
    
   eval-exp(UnOp(op, exp)) =
    v1 <- eval-exp(exp);
    return(eval-unop(op, v1))
    
  eval-exp(IfElse(cond, then, else)); k(v1) =
    c <- eval-exp(cond);
    jumpz(c, else_b, then_b);
    
    !v1;
    then_b = <
      ~v1 <- eval-exp(~then);
      jump(~k)
    >;
    else_b = <
      ~v1 <- eval-exp(~else);
      jump(~k)
    >
    
  eval-exp(Let(binds, body)) = 
    o_scope <- cur();
    scope <- new(int(length(binds)));
    link(scope, [], &P);
    
    eval-let-binds(binds, scope);
    mkcur(scope);
    res <- eval-let-body(body);
    mkcur(o_scope);
    return(res)
    
  
    
  eval-exp(Lambda(args, body)) =
    map[associate-args](zip-with-index(args));
    df <- new(int(length(args)));
    link(df, [], &P);
    
    b <- <
      eval-lamb-body(~body)
    >;
    clos <- new(int(2));
    set(clos, [0], df);
    set(clos, [1], b);
    return(clos)    
    
  eval-exp(Callcc(func)); k(pop()) = 
    cc <- curC(k);
        
    clos <- eval-exp(func);
    
    cf <- newCF(get(clos, [0]));
    setC(cf, $ret, cc);
    df <- unpackCF(cf);
    set(df, [0], cc);
    callCF(cf, get(clos, [1]))
  
  
  eval-exp(FunApp([func | args])); k(pop()) =
    !closure;
    call_cont = <
      arg <- eval-first(~args);
      callC(~closure, arg)
    >;
    call_clos = <
      cf <- newCF(get(~closure, [0]));
      setC(cf, $ret, curC(~k));
      df <- unpackCF(cf);
      store-arg(zip-with-index(~args), df);
      callCF(cf, get(~closure, [1]))
    >;
    closure <- eval-exp(func);
    jumpz(is-frame(closure), call_cont, call_clos)
    
    
rules
   eval-first([first|_]) = eval-exp(first)
   
   associate-args( (idx, name) ) =
    associate-index(idx, name, "Var")
    
  store-arg([], _) = nop()
  store-arg([(idx, exp) | tail], frame) = 
    v1 <- eval-exp(exp);
    set(frame, [idx], v1);
    store-arg(tail, frame)
    
rules // Let internal rules
  eval-let-body([exp]) =
    v1 <- eval-exp(exp);
    return(v1)
      
  eval-let-body([exp | tail]) =
    v1 <- eval-exp(exp);
    return(eval-let-body(tail))
  
  eval-lamb-body([exp]) =
    v1 <- eval-exp(exp);
    rc <- getC(curCF(), $ret);
    callC(rc, v1)
      
  eval-lamb-body([exp | tail]) =
    v1 <- eval-exp(exp);
    eval-lamb-body(tail)

  eval-let-binds([], scope) = nop()
    
  eval-let-binds([Bind(name, val) | tail], scope) = 
    v1 <- eval-exp(val);
    set(scope, resolveVar(name), v1);
    eval-let-binds(tail, scope)
    
    