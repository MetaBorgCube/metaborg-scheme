module desugar

imports
  signatures/scheme-sig
  signatures/Expression-sig
  
signature
  sorts S
  constructors    
    Redefine : STRING * Exp -> S
    Conss : Exp * Exp -> S
    EmptyList: S
    
rules
	desugar = desugar-define; desugar-letstar-all; desugar-list-all
	
	
	
	
	desugar-define: Program(body) -> Program(body_out)
	  where
	  	(body_out, _) := <foldl(desugar-define)> (body, ([], []))
	
	desugar-define: (Define(name, val), (body, defines)) -> (<concat>[body, [Redefine(name, val)]], defines)
	  where
	  	_ := <elem> (name, defines)
	
	desugar-define: (Define(name, val), (body, defines)) -> (<concat>[body, [Define(name, val)]], [name | defines])
	
	desugar-define: (e, (body, defines)) -> (<concat>[body, [e]], defines)
	
	desugar-list-all = topdown(try(desugar-list))
	desugar-list: Quote(FunApp([])) -> EmptyList()
	
	desugar-letstar-all = topdown(try(desugar-letstar))
	desugar-letstar: LetStar([h], body) -> Let([h], body)
	desugar-letstar: LetStar([h|tail], body) -> Let([h], [LetStar(tail, body)]) where <geq> (1, <length> tail)
	
	