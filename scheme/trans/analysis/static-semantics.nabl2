module analysis/static-semantics

imports

  signatures/-
  
signature
	namespaces Var

name resolution
  labels
    P

  order
    D < P

  well-formedness
	P*

rules

  init ^ (s) := new s.

  [[ prog@Program(expr) ^ (s) ]] :=
    new p, p ---> s,
    Line{"__NEXT__" @ prog} <- s,
    FoldExpr[[expr ^(p)]].
    
  FoldExpr[[ [] ^(_)]].
  
  FoldExpr [[ [v@Define(var, val) | t] ^(p) ]] :=
    Line{"__NEXT__"@v} -> p,
	Expr [[val ^(p)]],
	new d, d ---> p,
  	Var{var} <- d,
	distinct/name W(d)/Var | error $[Redefinition of variable [var], there must be a problem with desugaring] @var,
  	FoldExpr [[t ^(d)]].
  	
  FoldExpr [[ [v@Redefine(var, val) | t] ^(s) ]] :=
    Line{"__NEXT__"@v} -> s,
	Expr [[val ^(s)]],
	Var{var} -> s,
  	Var{var} |-> d | error $[Variable [var] is not defined] @var,
  	FoldExpr [[t ^(s)]].
	
  FoldExpr [[ [h|t] ^(s)]] :=
    Line{"__NEXT__"@h} -> s,
  	Expr [[h ^(s)]],
  	FoldExpr [[t ^(s)]].



  Expr [[ IfElse(cond, then, else) ^(s)]] :=
  	Expr [[cond ^(s)]],
  	Expr [[then ^(s)]],
  	Expr [[else ^(s)]].
  	
  Expr [[ UnOp(op, exp) ^(s)]] :=
  	Expr [[exp ^(s)]].
  	
  
  Expr [[ EmptyList() ^(s)]].
  
  Expr [[ Conss(h, t) ^(s)]] :=
  	Expr [[h ^(s)]],
  	Expr [[t ^(s)]].
  	
  Expr [[ BinOp(op, e1, e2) ^(s)]] :=
  	Expr [[e1 ^(s)]],
  	Expr [[e2 ^(s)]].
  		
  Expr [[ Callcc(exp) ^(s) ]] :=
  	Expr [[exp ^(s)]].
  	
  Expr [[ Set(ref, exp) ^(s) ]] :=
  	Expr [[ref ^(s)]],
  	Expr [[exp ^(s)]].
  	
  Expr [[ Let(binds, body) ^(s) ]] :=
  	new let, let ---> s,
  	Map1(Bind) [[binds ^(let, s)]],
  	Map1(Expr) [[body  ^(let)]].
  	
  Expr [[ Lambda(binds, body) ^(s) ]] :=
  	new lam, lam ---> s,
  	Map1(Bind) [[binds ^(lam)]],
  	Map1(Expr) [[body  ^(lam)]].
  	
  Bind [[ Bind(name, val) ^(s, p) ]] :=
  	Var{name} <- s,
	distinct/name W(s)/Var | warning $[Redefinition of variable] @name,
	Expr [[val ^(p)]].
	
  Bind [[ name ^(s) ]] :=
    Var{name} <- s,
	distinct/name W(s)/Var | warning $[Redefinition of variable] @name.
	    
  Expr [[ Ref(name) ^(s) ]] :=
  	Var{name} -> s,
  	Var{name} |-> d | error $[Variable [name] is not defined] @name.
  	
  Expr [[ FunApp(exps) ^(s) ]] :=
    Map1(Expr)[[exps ^(s)]].
 
  Expr [[ Num(_) ^(s) ]].
  Expr [[ Bool(_) ^(s) ]].