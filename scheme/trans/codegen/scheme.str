module scheme

imports
  signatures/framevm-sig
  fvm-util
  
imports
  signatures/scheme-sig
  signatures/Expression-sig
  
  codegen/-
  desugar/-

rules
	compile-to-fvm: Program(exprs) -> <framevm-from-flat> <concat> [fvm_init, <concat> linear_instr, fvm_exit]
	  where
	  	_ := <new-counter> "line"; 
	  	_ := <new-counter> "cont"; 
	  	_ := <new-counter> "lamb"; 
	  	_ := <new-counter> "prelamb"; 
	  	line_lbl := $[LINE_[<next-counter> "line"]];
	  	linear_instr := <map(compile-topexp)> exprs;
	  	fvm_init := [FVM_New(), FVM_Dup(), FVM_Link(FVM_Self(), "Q"), FVM_Dup(), FVM_ContNewR(FVM_Label(line_lbl)), FVM_Set(FVM_Path([FVM_Cont("n")])), FVM_ScopeDown(FVM_Label(line_lbl)), FVM_Label(line_lbl)];
	  	fvm_exit := [FVM_IPush("0"), FVM_Return()] 
	
	line-init: _ -> (init, line_lbl)
	  where
	  	line_lbl := $[LINE_[<next-counter> "line"]];
	  	init := [FVM_ContNew(FVM_Label(line_lbl)), FVM_Set(FVM_Path([FVM_Link("Q"), FVM_Cont("n")]))]
	
	next-line: lbl -> [FVM_Get(FVM_Path([FVM_Link("Q"), FVM_Cont("n")])), FVM_ContCall(), FVM_Label(lbl)]
	  	
	scope-down: e -> [FVM_New(), FVM_Dup(), FVM_Link(FVM_Self(), "P"), FVM_ScopeDown(FVM_Label(cont_name)), FVM_Label(cont_name)]
	  where
	  	cont_name := $[CONT_[<next-counter> "cont"]]
	  	
	scope-up: e -> [FVM_ScopeUp(FVM_Path([FVM_Link("P")]), FVM_Label(cont_name)), FVM_Label(cont_name)]
	  where
	  	cont_name := $[CONT_[<next-counter> "cont"]]
	  	
	  	
	  	
	compile-topexp: DefineSingle(Bind(name, idx), val) -> <concat> [init, scopedownexp, val_instrs, set_instrs, scopeupexp, scope_instr, scopedown, init_newscope, set_instrs2, next_line]
	  where
	  	(init, lbl) := <line-init>;
	  	scopedownexp := <scope-down>;
	  	val_instrs := <compile-exp> val;
	  	set_instrs := [FVM_Set(FVM_Path([FVM_Link("P"), FVM_SlotR()]))];
	  	scopeupexp := <scope-up>;
	  	
	  	scope_instr := [FVM_New(), FVM_Dup(), FVM_Link(FVM_Self(), "P"), FVM_Dup(), FVM_Link(FVM_Path([FVM_Link("Q")]), "Q")];
	  	
	  	cont_name := $[CONT_[<next-counter> "cont"]];
	  	scopedown := [FVM_ScopeDown(FVM_Label(cont_name))];
	  	init_newscope := [FVM_Label(cont_name), FVM_ContNew(FVM_Label(lbl)), FVM_Set(FVM_Path([FVM_Link("Q"), FVM_Cont("n")]))];
	  	
	  	set_instrs2 := [FVM_Get(FVM_Path([FVM_Link("P"), FVM_SlotR()])), FVM_Set(FVM_Path([FVM_Slot(<int-to-string> idx)]))];
	  	next_line := <next-line> lbl
	  	
	compile-topexp: RedefineSingle(name, val) -> <concat> [init, scopedown, val_instrs, store_instr, scopeup, set_instrs, next_line]
	  where
	  	(init, lbl) := <line-init>;
	  	scopedown := <scope-down>;
	  	val_instrs := <compile-exp> val;
	  	
	  	store_instr := [FVM_Set(FVM_Path([FVM_Link("P"), FVM_SlotR()]))];
	  	scopeup := <scope-up>;
	  	set_instrs := [FVM_Get(FVM_Path([FVM_SlotR()])), FVM_Set(<framevm-path-from-nabl2> (name, "Var", "index"))];
	  	next_line := <next-line> lbl
	
	compile-topexp: Lambda(args, body) -> <concat> [init, scopedown, lambda, scopeup, next_line]
	  where
	  	(init, lbl) := <line-init>;
	  	scopedown := <scope-down>;
	  	lambda := <compile-exp> Lambda(args, body);
	  	scopeup := <scope-up>;
	  	next_line := <next-line> lbl
	
	// Print results of the rest of the expressions
	compile-topexp: e -> <concat> [init, scopedown, exp, [FVM_Print()], scopeup, next_line]
	  where
	  	(init, lbl) := <line-init>;
	  	scopedown := <scope-down>;
	  	exp := <compile-exp> e;
	  	scopeup := <scope-up>;
	  	next_line := <next-line> lbl
	  	
	  	